{"version":3,"file":"static/js/424.fa755d9c.chunk.js","mappings":"4JACA,MAA0B,yBAA1B,EAAmE,+BAAnE,EAA0G,uBAA1G,EAAkJ,gC,UCAlJ,EAA8B,4BAA9B,EAAmE,uB,SCQtDA,EAAS,SAACC,GACnB,IAAIC,EAAI,mBAAeD,EAAME,IAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAApC,SAAqDJ,EAAMO,gBCbrE,EAA+B,8BCMlBC,EAAU,SAACR,GACtB,OACI,gBAAKG,UAAWC,EAAhB,SAAuCJ,EAAMS,e,iDC6B7CC,GAAeC,EAAAA,EAAAA,GAAU,KAUzBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAChDC,KAAM,cADkBD,EATsC,SAACb,GAC/D,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,YAAa,cAAeC,UAAWC,EAAAA,EAAUC,KAAM,WAAYC,SAAU,CAACC,EAAAA,EAAUb,MAC/F,0C,uCCxBZ,GAAec,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAZoB,SAACC,GACrB,MAAO,CACHC,aAAcD,EAAME,YAAYD,aAChCE,cAAeH,EAAME,YAAYC,iBASZ,CAACC,WAAAA,EAAAA,IAC1BC,EAAAA,EAFJ,EDJuB,SAAC/B,GAKpB,OACI,iBAAKG,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,sBACA,gBAAKD,UAAWC,EAAhB,SACKJ,EAAM2B,aAAaK,KAAI,SAACC,EAAGC,GAAJ,OAAU,SAACnC,EAAD,CAE9BQ,WAAY0B,EAAE1B,WACdL,GAAI+B,EAAE/B,IAFD+B,EAAE/B,GAAKgC,SAIpB,iBAAK/B,UAAWC,EAAhB,UACKJ,EAAM6B,cAAcG,KAAI,SAACG,EAAGD,GAAJ,OAAU,SAAC1B,EAAD,CAAiBC,YAAa0B,EAAE1B,aAAlByB,OACjD,SAACtB,EAAD,CAAqBG,SAdT,SAACqB,GACrBpC,EAAM8B,WAAWM,EAASC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6Ds1k\",\"dialogs_items\":\"Dialogs_dialogs_items__Z7evr\",\"title\":\"Dialogs_title__W4x9O\",\"messages_items\":\"Dialogs_messages_items__8X1hC\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog_item\":\"Dialog_dialog_item__xK6GK\",\"active\":\"Dialog_active__gIsdY\"};","\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Dialog.module.css'\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    dialogName: string\r\n}\r\n\r\nexport const Dialog = (props:DialogPropsType) => {\r\n    let path = `/dialogs/${props.id}`\r\n\r\n  return (\r\n      <div className={classes.dialog_item}>\r\n          <NavLink to={path} activeClassName={classes.active}>{props.dialogName}</NavLink>\r\n      </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message_item\":\"Message_message_item__SQb3t\"};","import classes from './Message.module.css';\r\n\r\n\r\ntype MessagePropsType = {\r\n    messageText: string\r\n}\r\n\r\nexport const Message = (props:MessagePropsType) => {\r\n  return (\r\n      <div className={classes.message_item}>{props.messageText}</div>\r\n  )\r\n}","import classes from './Dialogs.module.css'\r\nimport {Dialog} from './Dialog/Dialog';\r\nimport {Message} from './Message/Message';\r\nimport React from 'react';\r\nimport {dialogNameType, messageTextType} from 'redux/dialogs-page-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {mapDispatchToPropsTypeDialogs} from 'components/Dialogs/DialogsContainer';\r\nimport {maxLength, required} from 'utils/validators/validators';\r\nimport {Textarea} from 'components/Common/formControls/Textarea/FormControls';\r\n\r\ntype DialogsPropsType = {\r\n    dialogsNames: dialogNameType[]\r\n    messagesTexts: messageTextType[]\r\n} & mapDispatchToPropsTypeDialogs\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const onSubmitHandler = (formData: FormDataType) => {\r\n        props.addMessage(formData.textarea)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <h2 className={classes.title}>Dialogs</h2>\r\n            <div className={classes.dialogs_items}>\r\n                {props.dialogsNames.map((d, i) => <Dialog\r\n                    key={d.id + i}\r\n                    dialogName={d.dialogName}\r\n                    id={d.id}/>)}\r\n            </div>\r\n            <div className={classes.messages_items}>\r\n                {props.messagesTexts.map((m, i) => <Message key={i} messageText={m.messageText}/>)}\r\n                <AddMessageReduxForm onSubmit={onSubmitHandler} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst maxLength100 = maxLength(100)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'Add message'} component={Textarea} name={'textarea'} validate={[required, maxLength100]} />\r\n            <button>Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({\r\n    form: 'addMessage'\r\n})(AddMessageForm)\r\n\r\n//types\r\ntype FormDataType = {\r\n    textarea: string\r\n}","import {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from 'redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from 'hoc/WithAuthRedirect';\r\nimport React from 'react';\r\nimport {addMessage} from 'redux/dialogs-page-reducer';\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        dialogsNames: state.dialogsPage.dialogsNames,\r\n        messagesTexts: state.dialogsPage.messagesTexts,\r\n    }\r\n}\r\n\r\nexport type mapDispatchToPropsTypeDialogs = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n"],"names":["Dialog","props","path","id","className","classes","to","activeClassName","dialogName","Message","messageText","maxLength100","maxLength","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","compose","connect","state","dialogsNames","dialogsPage","messagesTexts","addMessage","WithAuthRedirect","map","d","i","m","formData","textarea"],"sourceRoot":""}